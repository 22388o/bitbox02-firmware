#!/usr/bin/env bash

# Run clang-tidy on all sources that were built

# Exit on error
set -e

# Exit on pipe fail
set -o pipefail

CLANGTIDY=${CLANGTIDY:-clang-tidy-8}
command -v ${CLANGTIDY} >/dev/null 2>&1 || { echo >&2 "${CLANGTIDY} is missing"; exit 1; }

JQ=${JQ:-jq}
command -v ${JQ} >/dev/null 2>&1 || { echo >&2 "${JQ} is missing"; exit 1; }

if test ! -d build -a ! -d build-build; then
	echo >&2 "neither build nor build-build is a directory"
	echo >&2 "please run 'make <target>' before running tidy to generate compile_commands.json"
	exit 1
fi

for dir in build build-build; do
	if ! test -d ${dir}; then
		continue
	fi
	# Filter out some commands that are not understood by clang-tidy
	sed -i 's/-mcpu=cortex-m4//g; s/-mfloat-abi=softfp//g; s/-mlong-calls//g; s/-mthumb//g;
	        s/-Wno-cast-function-type//g; s/-mfpu=fpv4-sp-d16//g; s/-Wformat-signedness//g' ${dir}/compile_commands.json

	# Exclude drivers and external for now. We get the base file set from compile_commands.json, as
	# clang-tidy unfortunately tries to lint a provided source anyway even if it is not part of the
	# build.
	SOURCES=$(cat ${dir}/compile_commands.json | ${JQ} 'map_values(.file) | .[]' | grep -v -e '/drivers/' -e '/external/' -e '/test/unit-test/u2f/' -e '/build/' -e '/build-build/' | sort | uniq | xargs echo)

	# The list of tidy checks must stay in sync with .ci/check-tidy
	${CLANGTIDY} -quiet -p ${dir} -checks=-*,clang-analyzer-*,-clang-analyzer-cplusplus*,bugprone-*,performance-*,portability-*,readability-*,-readability-braces-around-statements,-readability-magic-numbers,-readability-isolate-declaration -warnings-as-errors=* -header-filter '.*' ${SOURCES}
done
